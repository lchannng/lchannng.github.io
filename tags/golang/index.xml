<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on lchannng&#39;s blog</title>
    <link>https://example.com/tags/golang/</link>
    <description>Recent content in golang on lchannng&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 16 May 2019 15:01:58 +0000</lastBuildDate><atom:link href="https://example.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go笔记 defer,panic,recover</title>
      <link>https://example.com/posts/2019-05-16-go-defer-panic-recover/</link>
      <pubDate>Thu, 16 May 2019 15:01:58 +0000</pubDate>
      
      <guid>https://example.com/posts/2019-05-16-go-defer-panic-recover/</guid>
      <description>官方blog传送门：https://blog.golang.org/defer-panic-and-recover
defer  A defer statement pushes a function call onto a list. The list of saved calls is executed after the surrounding function returns. Defer is commonly used to simplify functions that perform various clean-up actions.
 defer类似cpp在对象在离开作用于后析构，defer可以多次，这样形成一个defer栈，后defer的语句在函数返回时将先被调用。
func CopyFile(dstName, srcName string) (written int64, err error) { src, err := os.Open(srcName) if err != nil { return } defer src.Close() dst, err := os.Create(dstName) if err != nil { return } defer dst.</description>
    </item>
    
  </channel>
</rss>
